{"mappings":"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","sources":["register/templates/js/main.js"],"sourcesContent":["function init() {\r\n\r\n  // listen to the resize events\r\n  window.addEventListener('resize', onResize, false);\r\n  var camera;\r\n  var scene;\r\n  var renderer;\r\n\r\n  // create a scene, that will hold all our elements such as objects, cameras and lights.\r\n  scene = new THREE.Scene();\r\n\r\n  // create a camera, which defines where we're looking at.\r\n  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 10000000000);\r\n\r\n  // create a render and set the size\r\n  renderer = new THREE.WebGLRenderer();\r\n\r\n  renderer.setClearColor(new THREE.Color(0x212830));\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n  renderer.shadowMap.enabled = true;\r\n  \r\n  //AxesHelper added here !\r\n  var axisHelperSize = 0.5;\r\n  var axisHelperWidth = 5;\r\n\r\n  var material = new THREE.LineBasicMaterial({ color: 0xffffff, linewidth: axisHelperWidth });\r\n\r\n  var axisHelper = new THREE.AxesHelper(axisHelperSize,material)\r\n  axisHelper.scale.z = 0; //stops showing z axes\r\n  localToCameraAxesPlacement = new THREE.Vector3(-1.2 * camera.aspect,-1, -2); // make sure to update this on window resize\r\n\tscene.add(axisHelper)\r\n  \r\n\r\n  //Grid Helper\r\n  const gridHelper = new THREE.GridHelper(10000000, 1000000, 0x5B6685, 0x5B6685)\r\n  gridHelper.rotation.x= -0.5*Math.PI;\r\n  scene.add(gridHelper)\r\n\r\n  // position and point the camera to the center of the scene\r\n  camera.position.x = 0;\r\n  camera.position.y = 0;\r\n  camera.position.z = 100;\r\n  camera.lookAt(scene.position);\r\n\r\n  // add subtle ambient lighting\r\n  var ambienLight = new THREE.AmbientLight(0x353535);\r\n  scene.add(ambienLight);\r\n\r\n  // add spotlight for the shadows\r\n  var spotLight = new THREE.SpotLight(0xffffff);\r\n  spotLight.position.set(-10, 20, -5);\r\n  spotLight.castShadow = true;\r\n  scene.add(spotLight);\r\n\r\n\r\n  // var params = {\r\n  //   fullscreen: true,\r\n  //   autostart: true,\r\n  //   backgroundColor: 'hsl(0, 0%, 100%)'\r\n  // }\r\n\r\n  /////POINT\r\n\r\n//   // Create a geometry object for the point\r\n// var geometry = new THREE.Geometry();\r\n// geometry.vertices.push(new THREE.Vector3(0, 0, 0)); // Add a single vertex to the geometry\r\n\r\n// // Create a material for the point\r\n// var material = new THREE.PointsMaterial({ color: 0xff0000, size:1});\r\n\r\n// // Create a points object that uses the geometry and material\r\n// var point = new THREE.Points(geometry, material);\r\n\r\n// // Add the point to the scene\r\n// scene.add(point);\r\n\r\n///Free Open Polygon\r\n\r\n  // var geometry = new THREE.Geometry();\r\n  // geometry.vertices.push(new THREE.Vector3(-10, 10, 0));\r\n  // geometry.vertices.push(new THREE.Vector3(-10, -10, 0));\r\n  // geometry.vertices.push(new THREE.Vector3(10, -10, 0));\r\n  // geometry.vertices.push(new THREE.Vector3(10, 10, 0));\r\n  // var line2 = new THREE.Line(geometry);\r\n  // scene.add(line2);\r\n\r\n///Free Closed Polygon\r\n\r\n//   var geometry = new THREE.Geometry();\r\n// geometry.vertices.push(new THREE.Vector3(-1, 1, 0));\r\n// geometry.vertices.push(new THREE.Vector3(-1, -1, 0));\r\n// geometry.vertices.push(new THREE.Vector3(1, -1, 0));\r\n// geometry.vertices.push(new THREE.Vector3(1, 1, 0));\r\n// var lineLoop = new THREE.LineLoop(geometry);\r\n// scene.add(lineLoop);\r\n  \r\n/////Ellipse\r\n\r\n// var shape = new THREE.Shape();\r\n// var x = 0;\r\n// var y = 0;\r\n// var xRadius = 2;\r\n// var yRadius = 1;\r\n// var startAngle = 0;\r\n// var endAngle = Math.PI * 2;\r\n// var clockwise = false;\r\n\r\n// // Create the ellipse path\r\n// shape.moveTo(x + xRadius, y);\r\n// shape.ellipse(x, y, xRadius, yRadius, startAngle, endAngle, clockwise);\r\n// shape.closePath();\r\n// var geometry = new THREE.ShapeGeometry(shape);\r\n// var material = new THREE.MeshBasicMaterial({ color: 0xffffff });\r\n// var mesh = new THREE.Mesh(geometry, material);\r\n\r\n// // Add the mesh to the scene\r\n// scene.add(mesh); \r\n\r\n\r\n  // var elem = document.body;\r\n  // var two = new Two(params).appendTo(elem);\r\n\r\n\r\n// //////Spline\r\n// var points = [\r\n//   new THREE.Vector3( -10, 0, 10 ),\r\n//   new THREE.Vector3( -5, 5, 5 ),\r\n//   new THREE.Vector3( 0, 0, 0 ),\r\n//   new THREE.Vector3( 5, -5, 5 ),\r\n//   new THREE.Vector3( 10, 0, 10 )\r\n// ];\r\n\r\n// // Create the spline curve\r\n// var curve = new THREE.CatmullRomCurve3( points );\r\n\r\n// // Define the geometry for the spline\r\n// var geometry = new THREE.Geometry();\r\n// geometry.vertices = curve.getPoints( 50 ); // get 50 points along the curve\r\n\r\n// // Define the material for the spline\r\n// var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );\r\n\r\n// // Create the spline object and add it to the scene\r\n// var splineObject = new THREE.Line( geometry, material );\r\n// scene.add( splineObject );\r\n\r\n///////End Points\r\n\r\n// // // Define the geometry for the line\r\n// var geometry = new THREE.Geometry();\r\n// geometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) ); // start point\r\n// geometry.vertices.push( new THREE.Vector3( 5, 5, 5 ) ); // end point\r\n\r\n// // Define the material for the line\r\n// var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );\r\n\r\n// // Create the line object and add it to the scene\r\n// var line = new THREE.Line( geometry, material );\r\n// scene.add( line );\r\n\r\n// // Create a sphere to show the endpoint\r\n// var endpointGeometry = new THREE.SphereGeometry( 0.1, 16, 16 );\r\n// var endpointMaterial = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\r\n// var endpointSphere = new THREE.Mesh( endpointGeometry, endpointMaterial );\r\n// endpointSphere.position.copy( geometry.vertices[1]); // set the sphere position to the endpoint\r\n// scene.add( endpointSphere );\r\n\r\n\r\n// const raycaster = new THREE.Raycaster();\r\n\r\n// // set the origin and direction of the raycaster\r\n// raycaster.setFromCamera(mouse, camera);\r\n\r\n// // check for intersections with the objects in the scene\r\n// const intersects = raycaster.intersectObjects(scene.children);\r\n\r\n// // if there are intersections, get the first one and show the intersection point\r\n// if (intersects.length > 0) {\r\n//   const intersectionPoint = intersects[0].point;\r\n//   console.log(\"Intersection point:\", intersectionPoint);\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n/////////////\r\n\r\n\r\n// var geometry = new THREE.Geometry();\r\n// geometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) ); // start point\r\n// geometry.vertices.push( new THREE.Vector3( 5, 5, 0 ) ); // end point\r\n\r\n// // Define the material for the line\r\n// var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );\r\n\r\n// // Create the line object and add it to the scene\r\n// var line1 = new THREE.Line3( geometry, material );\r\n// scene.add( line1 );\r\n\r\n\r\n// var geometry1 = new THREE.Geometry();\r\n// geometry1.vertices.push( new THREE.Vector3( 3, 0, 0 ) ); // start point\r\n// geometry1.vertices.push( new THREE.Vector3( 0, 3, 0 ) ); // end point\r\n\r\n// // Define the material for the line\r\n// var material1 = new THREE.LineBasicMaterial( { color : 0xff0000 } );\r\n\r\n// // Create the line object and add it to the scene\r\n// var line2 = new THREE.Line3( geometry1, material1 );\r\n// scene.add( line2 );\r\n\r\n\r\n\r\n// // create a variable to hold the currently highlighted point\r\n// let highlightedPoint = null;\r\n\r\n// // add event listeners for mouse events\r\n// window.addEventListener('mousemove', onMouseMove);\r\n\r\n// function onMouseMove(event) {\r\n//   // calculate the mouse position in normalized device coordinates\r\n//   const mouse = new THREE.Vector2(\r\n//     ( event.clientX / window.innerWidth ) * 2 - 1,\r\n//     - ( event.clientY / window.innerHeight ) * 2 + 1\r\n//   );\r\n\r\n//   // create a raycaster from the mouse position\r\n//   const raycaster = new THREE.Raycaster();\r\n//   raycaster.setFromCamera(mouse, camera);\r\n\r\n//   // find the intersection point of the two lines\r\n//   const intersectionPoint = new THREE.Vector3();\r\n//   console.log(line2.closestPointToPoint(raycaster.ray.origin))\r\n//   line1.closestPointToPoint(line2.closestPointToPoint(raycaster.ray.origin),true, intersectionPoint);\r\n\r\n\r\n\r\n//   // calculate the distance between the intersection point and the mouse pointer\r\n//   const distance = intersectionPoint.distanceTo(raycaster.ray.origin);\r\n\r\n//   // if the distance is below a certain threshold, show the intersection point\r\n//   if (distance < 0.5) {\r\n//     console.log(\"Intersection point:\", intersectionPoint);\r\n\r\n//     // create a sphere geometry to represent the intersection point\r\n//     const sphereGeometry = new THREE.SphereGeometry(0.2, 16, 16);\r\n//     const sphereMaterial = new THREE.MeshBasicMaterial({color: 0xff0000});\r\n//     const sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n//     sphereMesh.position.copy(intersectionPoint);\r\n\r\n//     // add the sphere to the scene and set it as the highlighted point\r\n//     scene.add(sphereMesh);\r\n//     highlightedPoint = sphereMesh;\r\n//   } else {\r\n//     // remove the highlighted point from the scene\r\n//     if (highlightedPoint) {\r\n//       scene.remove(highlightedPoint);\r\n//       highlightedPoint = null;\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// function addEndpointIndicator(object) {\r\n//   var endpointGeometry = new THREE.SphereGeometry( 0.1, 16, 16 );\r\n//   var endpointMaterial = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\r\n//   var endpointSphere = new THREE.Mesh( endpointGeometry, endpointMaterial );\r\n//   endpointSphere.visible = false; // hide the endpoint sphere by default\r\n//   scene.add( endpointSphere );\r\n\r\n//   object.addEventListener( 'mouseover', function ( event ) {\r\n//     var intersects = getIntersects( event.layerX, event.layerY, object );\r\n//     if ( intersects.length > 0 ) {\r\n//       var point = intersects[0].point;\r\n//       endpointSphere.position.copy( point );\r\n//       endpointSphere.visible = true;\r\n//     } else {\r\n//       endpointSphere.visible = false;\r\n//     }\r\n//   }, false );\r\n\r\n//   function getIntersects( x, y, object ) {\r\n//     var mouse = new THREE.Vector2();\r\n//     mouse.x = ( x / window.innerWidth ) * 2 - 1;\r\n//     mouse.y = - ( y / window.innerHeight ) * 2 + 1;\r\n\r\n//     var raycaster = new THREE.Raycaster();\r\n//     raycaster.setFromCamera( mouse, camera );\r\n\r\n//     var intersects = raycaster.intersectObject( object, true );\r\n//     console.log(intersects);\r\n//     return intersects;\r\n    \r\n//   }\r\n// }\r\n// var lineGeometry = new THREE.Geometry();\r\n// lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) );\r\n// lineGeometry.vertices.push( new THREE.Vector3( 5, 5, 5 ) );\r\n// var lineMaterial = new THREE.LineBasicMaterial( { color : 0xff0000 } );\r\n// var line4 = new THREE.Line( lineGeometry, lineMaterial );\r\n// scene.add( line4 );\r\n\r\n// addEndpointIndicator( line4 );\r\n\r\n\r\n//   var two = new Two({\r\n//     fullscreen: true,\r\n//     autostart: true\r\n//   })//.appendTo(document.getElementById(\"webgl-output\"));\r\n  \r\n//   const canvas = two.renderer.domElement;\r\n//   canvas.style.cursor = 'crosshair';\r\n  \r\n\r\n/////// MID POINT\r\n\r\n// var geometry = new THREE.Geometry();\r\n// geometry.vertices.push( new THREE.Vector3( 0, 0, 0 ) ); // start point\r\n// geometry.vertices.push( new THREE.Vector3( 5, 5, 0 ) ); // end point\r\n\r\n// const boundingBox = new THREE.Box3().setFromPoints(vertices);\r\n// geometry.boundingBox = boundingBox;\r\n// // Define the material for the line\r\n// var material = new THREE.LineBasicMaterial( { color : 0xff0000 } );\r\n\r\n// // Create the line object and add it to the scene\r\n// var myObject1 = new THREE.Line( geometry, material );\r\n\r\n// scene.add(myObject1);\r\n\r\n// var geometry2 = new THREE.Geometry();\r\n// geometry2.vertices.push( new THREE.Vector3( 0, 3, 0 ) ); // start point\r\n// geometry2.vertices.push( new THREE.Vector3( 3, 0, 0 ) ); // end point\r\n\r\n// // Define the material for the line\r\n// var material2 = new THREE.LineBasicMaterial( { color : 0xff0000 } );\r\n\r\n// // Create the line object and add it to the scene\r\n// var myObject2 = new THREE.Line( geometry2, material2 );\r\n\r\n// scene.add(myObject2);\r\n\r\n// const boxHelper = new THREE.BoxHelper(myObject1, 0xffff00); // create BoxHelper\r\n// const center = new THREE.Vector3().copy(myObject1.geometry.boundingBox.getCenter()); // get center point\r\n// boxHelper.setPosition(center); // set position of BoxHelper to center point\r\n// scene.add(boxHelper); // add BoxHelper to scene\r\n\r\n\r\n// //////Ray\r\n// // create a raycaster\r\n// const raycaster = new THREE.Raycaster();\r\n\r\n// // set the origin and direction of the raycaster\r\n// raycaster.setFromCamera(mouse, camera);\r\n\r\n// // check for intersections with the objects in the scene\r\n// const intersects = raycaster.intersectObjects(scene.children);\r\n\r\n// // if there are intersections, get the first one and show the intersection point\r\n// if (intersects.length > 0) {\r\n//   const intersectionPoint = intersects[0].point;\r\n//   console.log(\"Intersection point:\", intersectionPoint);\r\n// }\r\n\r\n// const raycaster = new THREE.Raycaster();\r\n// const intersectionPoint = new THREE.Vector3();\r\n\r\n// // Set the raycaster's position to the position of object1\r\n// raycaster.set(myObject1.position, myObject1.getWorldDirection());\r\n\r\n// // Check for intersections with object2's geometry\r\n// const intersections = raycaster.intersectObject(myObject2);\r\n\r\n// if (intersections.length > 0) {\r\n//   // Get the intersection point\r\n//   intersectionPoint.copy(intersections[0].point);\r\n\r\n//   // Create a new point object at the intersection point\r\n//   const pointGeometry = new THREE.BufferGeometry().setFromPoints([intersectionPoint]);\r\n//   const pointMaterial = new THREE.PointsMaterial({color: 0x00ff00});\r\n//   const intersectionPointObject = new THREE.Points(pointGeometry, pointMaterial);\r\n\r\n//   // Add the intersection point object to the scene\r\n//   scene.add(intersectionPointObject);\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Assuming you have a line or object named 'myObject' with a geometry property\r\n// const geometry = myObject1.geometry;\r\n\r\n// Get the midpoint of the geometry\r\n// const midpoint = new THREE.Vector3();\r\n// geometry.computeBoundingBox();\r\n// geometry.boundingBox.getCenter(midpoint);\r\n\r\n\r\n//////MID\r\n// // Create a new point object at the midpoint\r\n// const pointGeometry = new THREE.BufferGeometry().setFromPoints([midpoint]);\r\n// const pointMaterial = new THREE.PointsMaterial({color: 0xff0000});\r\n// const midpointPoint = new THREE.Points(pointGeometry, pointMaterial);\r\n\r\n// // Add the midpoint point object to the scene\r\n// myObject1.add(midpointPoint);\r\n\r\n\r\n\r\n\r\n\r\n  // document.getElementById(\"webgl-output\").appendChild(two.renderer.domElement);\r\n\r\n \r\n\r\n// Add an event listener to the button\r\nvar button = document.createElement('button');\r\nbutton.innerHTML = '<span class=\"material-symbols-outlined\">pen_size_2</span>';\r\nbutton.style.position = 'absolute';\r\nbutton.style.top = '10px';\r\nbutton.style.left = '10px';\r\ndocument.body.appendChild(button);\r\n\r\n// Add an event listener to the button\r\n  button.addEventListener('click', function lin() {\r\n\r\n        const line = two.makeLine(100, 100, 500, 100);\r\n        line.stroke = '#ffffff';\r\n        line.linewidth = 4;\r\n        // define a variable to keep track of whether the line is being dragged\r\n        let isDragging = true;\r\n\r\n        // define variables to keep track of the mouse position\r\n        let mouseStartX = 0;\r\n        let mouseStartY = 0;\r\n\r\n        // add event listeners to the renderer's domElement\r\n        two.renderer.domElement.addEventListener('mousedown', onMouseDown);\r\n        two.renderer.domElement.addEventListener('mousemove', onMouseMove);\r\n        two.renderer.domElement.addEventListener('mouseup', onMouseUp);\r\n\r\n        // handle the mousedown event\r\n        function onMouseDown(event) {\r\n        // check if the mouse is over the line\r\n        if (line.contains(event.clientX, event.clientY)) {\r\n          // set the isDragging flag to true\r\n          isDragging = false;\r\n          // save the mouse position\r\n          mouseStartX = event.clientX;\r\n          mouseStartY = event.clientY;\r\n        }\r\n        }\r\n\r\n        // handle the mousemove event\r\n        function onMouseMove(event) {\r\n        // check if the line is being dragged\r\n        if (isDragging) {\r\n          // calculate the distance the mouse has moved\r\n          const dx = event.clientX - mouseStartX;\r\n          const dy = event.clientY - mouseStartY;\r\n          // update the position of the line\r\n          line.translation.x += dx;\r\n          line.translation.y += dy;\r\n          // save the mouse position for the next mousemove event\r\n          mouseStartX = event.clientX;\r\n          mouseStartY = event.clientY;\r\n        }\r\n        }\r\n\r\n        // handle the mouseup event\r\n        function onMouseUp(event) {\r\n        // set the isDragging flag to false\r\n        isDragging = false;\r\n        }\r\n\r\n\r\n        two.update();\r\n              \r\n\r\n        \r\n        var gui = new dat.GUI();\r\n        const LineFolder = gui.addFolder(\"Line\");\r\n        LineFolder.add(line.translation, \"x\", 0, two.width).step(1).name(\"X Position\");\r\n        LineFolder.add(line.translation, \"y\", 0, two.height).step(1).name(\"Y Position\");\r\n        LineFolder.add(line.vertices[1], 'x', 10, two.width).step(1).name('Increase Right');\r\n        LineFolder.add(line.vertices[0], 'x', 10, two.width).step(1).name('Decrease Left');\r\n        LineFolder.add(line, 'rotation', 0, Math.PI * 2).name('Angle');      \r\n        \r\n\r\n        \r\n\r\n});\r\n\r\n\r\n \r\n\r\n  //circle\r\n    //Button Circle Click\r\n    var cbutton = document.createElement('button');\r\n    cbutton.innerHTML = '<span class=\"material-symbols-outlined\">circle</span>';\r\n    cbutton.style.position = 'absolute';\r\n    cbutton.style.top = '10px';\r\n    cbutton.style.left = '50px';\r\n    document.body.appendChild(cbutton);\r\n\r\n  cbutton.addEventListener('click', function circ() {\r\n      \r\n    var circle = two.makeCircle(110, 110, 100);\r\n    circle.translation.x=700\r\n    circle.translation.y=350\r\n    circle.stroke='#ffffff';\r\n    circle.noFill();\r\n    circle.linewidth=3\r\n    \r\n    two.renderer.domElement.addEventListener(\"mousedown\", function(event) {\r\n      circle.translation.set(event.clientX, event.clientY);      \r\n    });\r\n\r\n\r\n\r\n    var gui = new dat.GUI();\r\n    const circleFolder = gui.addFolder(\"Circle\");\r\n    circleFolder.add(circle.translation, \"x\", 0, two.width).step(1).name(\"X Position\");\r\n    circleFolder.add(circle.translation, \"y\", 0, two.height).step(1).name(\"Y Position\");\r\n    circleFolder.add(circle, 'radius', 10, 1000).step(1).name('Radius');\r\n\r\n  \r\n});\r\n\r\n\r\n// Add an event listener to the button\r\n//Rectangle\r\n    var rbutton = document.createElement('button');\r\n    rbutton.innerHTML = '<span class=\"material-symbols-outlined\">rectangle</span>';\r\n    rbutton.style.position = 'absolute';\r\n    rbutton.style.top = '10px';\r\n    rbutton.style.left = '90px';\r\n    document.body.appendChild(rbutton);\r\n\r\n    rbutton.addEventListener('click', function rect() {\r\n      var rect = two.makeRectangle(two.width / 2, two.height / 2, 100, 100);\r\n      rect.stroke='#ffffff';\r\n      rect.noFill();\r\n      rect.linewidth=3\r\n\r\n   \r\n\r\n      var gui = new dat.GUI();\r\n      var rectFolder = gui.addFolder('Rectangle');\r\n      rectFolder.add(rect.translation, 'x', 0, two.width).name('X');\r\n      rectFolder.add(rect.translation, 'y', 0, two.height).name('Y');\r\n      rectFolder.add(rect, 'width', 0, two.width).name('Width');\r\n      rectFolder.add(rect, 'height', 0, two.height).name('Height');\r\n      \r\n      two.update();\r\n    });\r\n\r\n//Polygon with Manupilating Edges\r\n\r\n    //Polygon\r\n    var pbutton = document.createElement('button');\r\n    pbutton.innerHTML = '<span class=\"material-symbols-outlined\">pentagon</span>';\r\n    pbutton.style.position = 'absolute';\r\n    pbutton.style.top = '10px';\r\n    pbutton.style.left = '130px';\r\n    document.body.appendChild(pbutton);\r\n\r\n    pbutton.addEventListener('click', function poly() {\r\n\r\n          var sides = 3;\r\n          var radius = 100;\r\n          var x = two.width / 2;\r\n          var y = two.height / 2;\r\n          \r\n          var polygon = two.makePolygon(x, y, radius, sides);\r\n          polygon.stroke = '#ffffff';\r\n          polygon.noFill();\r\n          polygon.linewidth = 3\r\n\r\n          var gui = new dat.GUI();\r\n          var polyFolder = gui.addFolder('Polygon');\r\n          polyFolder.add(polygon.translation, 'x', 0, two.width).name('X');\r\n          polyFolder.add(polygon.translation, 'y', 0, two.height).name('Y');\r\n          polyFolder.add(polygon, 'sides', 3, 50).step(1).name('Edges');\r\n          // polyFolder.add(polygon.translation, 'radius',100,two.width).name('Radius');\r\n          polyFolder.add(polygon, 'radius' , 0 , two.width).name('Radius');\r\n      // rectFolder.add(rect, 'height', 0, two.height).name('Height');\r\n\r\n\r\n          function updateVertices() {\r\n            var size = polygon.vertices[0].distanceTo(polygon.vertices[1]) / 10;\r\n            for (var i = 0; i < polygon.vertices.length; i++) {\r\n              var vertex = polygon.vertices[i];\r\n              vertex.radius = size;\r\n              vertex.fill = 'white';\r\n              vertex.stroke = 'black';\r\n              vertex.linewidth = 1;\r\n            }\r\n            \r\n          }\r\n          \r\n          updateVertices();\r\n          \r\n    });\r\n\r\n    \r\n// // Two.js axes\r\n//     var group = two.makeGroup();\r\n//     var group = two.makeGroup();\r\n//     var length = 10000;\r\n//     var thickness = 2;\r\n//     var xAxis = new Two.Line(-length/2, 0, length/2, 0);\r\n//     xAxis.linewidth = thickness;\r\n//     xAxis.stroke = 'red';\r\n//     group.add(xAxis);\r\n//     var yAxis = new Two.Line(0, -length/2, 0, length/2);\r\n//     yAxis.linewidth = thickness;\r\n//     yAxis.stroke = 'green';\r\n//     group.add(yAxis);\r\n//     group.translation.set(two.width / 2, two.height / 2);\r\n  \r\n \r\n// two.appendchild('webgl-output')\r\n\r\n\r\n  // add the output of the renderer to the html element\r\n  document.getElementById(\"webgl-output\").appendChild(renderer.domElement);\r\n  \r\n  // var twoRenderer = new Two.WebGLRenderer({\r\n  //   domElement: renderer.domElement\r\n  // });\r\n  \r\n    // initialize the trackball controls and the clock which is needed\r\n    var trackballControls = initTrackballControls(camera, renderer);\r\n    var clock = new THREE.Clock();\r\n\r\n  // twoRenderer.render(two.scene, camera);\r\n  \r\n\r\n  var t = 0 //declaring a variable to iterate in the following function\r\n  function render() {\r\n\r\n    //axis helper along with the scene rendering \r\n        t++\r\n        camera.position.x = 0\r\n        camera.position.y = 0\r\n        camera.updateMatrixWorld()\r\n        var axesPlacement = camera.localToWorld(localToCameraAxesPlacement.clone())\r\n        axisHelper.position.copy(axesPlacement);\r\n\r\n     // update the stats and the controls\r\n        trackballControls.update(clock.getDelta());\r\n        requestAnimationFrame(render);\r\n        \r\n        // twoRenderer.render(two.scene, camera)\r\n      \r\n        renderer.render(scene, camera);\r\n       \r\n  }\r\n\r\n  render();\r\n\r\n\r\n  //Window Resize Function.\r\n  function onResize() {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n  }    \r\n}"],"names":[],"version":3,"file":"main.ecf335b2.js.map","sourceRoot":"/__parcel_source_root/"}
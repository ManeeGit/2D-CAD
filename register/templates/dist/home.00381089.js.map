{"mappings":"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","sources":["register/js/util.js"],"sourcesContent":["/**\r\n * Initialize the statistics domelement\r\n * \r\n * @param {Number} type 0: fps, 1: ms, 2: mb, 3+: custom\r\n * @returns stats javascript object\r\n */\r\nfunction initStats(type) {\r\n\r\n    var panelType = (typeof type !== 'undefined' && type) && (!isNaN(type)) ? parseInt(type) : 0;\r\n    var stats = new Stats();\r\n\r\n    stats.showPanel(panelType); // 0: fps, 1: ms, 2: mb, 3+: custom\r\n    document.body.appendChild(stats.dom);\r\n\r\n    return stats;\r\n}\r\n\r\n/**\r\n * Initialize a simple default renderer and binds it to the \"webgl-output\" dom\r\n* element.\r\n * \r\n * @param additionalProperties Additional properties to pass into the renderer\r\n */\r\nfunction initRenderer(additionalProperties) {\r\n\r\n    var props = (typeof additionalProperties !== 'undefined' && additionalProperties) ? additionalProperties : {};\r\n    var renderer = new THREE.WebGLRenderer(props);\r\n    renderer.shadowMap.enabled = true;\r\n    renderer.shadowMapSoft = true;\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n    renderer.setClearColor(new THREE.Color(0x000000));\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.shadowMap.enabled = true;\r\n    document.getElementById(\"webgl-output\").appendChild(renderer.domElement);\r\n\r\n    return renderer;\r\n}\r\n\r\n/**\r\n * Initialize a simple default canvas renderer.\r\n * \r\n */\r\nfunction initCanvasRenderer() {\r\n\r\n    var canvasRenderer = new THREE.CanvasRenderer();\r\n    canvasRenderer.setClearColor(new THREE.Color(0x000000));\r\n    canvasRenderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.getElementById(\"webgl-output\").appendChild(canvasRenderer.domElement);\r\n\r\n    return canvasRenderer;\r\n}\r\n\r\n/**\r\n * Initialize a simple camera and point it at the center of a scene\r\n * \r\n * @param {THREE.Vector3} [initialPosition]\r\n */\r\nfunction initCamera(initialPosition) {\r\n    var position = (initialPosition !== undefined) ? initialPosition : new THREE.Vector3(-30, 40, 30);\r\n\r\n    var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    camera.position.copy(position);\r\n    camera.lookAt(new THREE.Vector3(0, 0, 0));\r\n\r\n    return camera;\r\n}\r\n\r\nfunction initDefaultLighting(scene, initialPosition) {\r\n    var position = (initialPosition !== undefined) ? initialPosition : new THREE.Vector3(-10, 30, 40);\r\n    \r\n    var spotLight = new THREE.SpotLight(0xffffff);\r\n    spotLight.position.copy(position);\r\n    spotLight.shadow.mapSize.width = 2048;\r\n    spotLight.shadow.mapSize.height = 2048;\r\n    spotLight.shadow.camera.fov = 15;\r\n    spotLight.castShadow = true;\r\n    spotLight.decay = 2;\r\n    spotLight.penumbra = 0.05;\r\n    spotLight.name = \"spotLight\"\r\n\r\n    scene.add(spotLight);\r\n\r\n    var ambientLight = new THREE.AmbientLight(0x343434);\r\n    ambientLight.name = \"ambientLight\";\r\n    scene.add(ambientLight);\r\n    \r\n}\r\n\r\nfunction initDefaultDirectionalLighting(scene, initialPosition) {\r\n    var position = (initialPosition !== undefined) ? initialPosition : new THREE.Vector3(100, 200, 200);\r\n    \r\n    var dirLight = new THREE.DirectionalLight(0xffffff);\r\n    dirLight.position.copy(position);\r\n    dirLight.shadow.mapSize.width = 2048;\r\n    dirLight.shadow.mapSize.height = 2048;\r\n    dirLight.castShadow = true;\r\n\r\n    dirLight.shadow.camera.left = -200;\r\n    dirLight.shadow.camera.right = 200;\r\n    dirLight.shadow.camera.top = 200;\r\n    dirLight.shadow.camera.bottom = -200;\r\n\r\n    scene.add(dirLight);\r\n\r\n    var ambientLight = new THREE.AmbientLight(0x343434);\r\n    ambientLight.name = \"ambientLight\";\r\n    scene.add(ambientLight);\r\n    \r\n}\r\n\r\n/**\r\n * Initialize trackball controls to control the scene\r\n * \r\n * @param {THREE.Camera} camera \r\n * @param {THREE.Renderer} renderer \r\n */\r\nfunction initTrackballControls(camera, renderer) {\r\n    var trackballControls = new THREE.TrackballControls(camera, renderer.domElement);\r\n    trackballControls.rotateSpeed = 1.0;\r\n    trackballControls.zoomSpeed = 1.2;\r\n    trackballControls.panSpeed = 0.8;\r\n    trackballControls.noZoom = false;\r\n    trackballControls.noPan = false;\r\n    trackballControls.staticMoving = true;\r\n    trackballControls.dynamicDampingFactor = 0.3;\r\n    trackballControls.keys = [65, 83, 68];\r\n\r\n    return trackballControls;\r\n}\r\n\r\n/**\r\n * Apply a simple standard material to the passed in geometry and return the mesh\r\n * \r\n * @param {*} geometry \r\n * @param {*} material if provided use this meshnormal material instead of creating a new material \r\n *                     this material will only be used if it is a meshnormal material.\r\n */\r\nvar applyMeshStandardMaterial = function(geometry, material) {\r\n    if (!material || material.type !== \"MeshStandardMaterial\")  {\r\n        var material = new THREE.MeshStandardMaterial({color: 0xff0000})\r\n        material.side = THREE.DoubleSide;\r\n    } \r\n\r\n    return new THREE.Mesh(geometry, material)\r\n}\r\n\r\n/**\r\n * Apply meshnormal material to the geometry, optionally specifying whether\r\n * we want to see a wireframe as well.\r\n * \r\n * @param {*} geometry \r\n * @param {*} material if provided use this meshnormal material instead of creating a new material \r\n *                     this material will only be used if it is a meshnormal material.\r\n */\r\nvar applyMeshNormalMaterial = function(geometry, material) {\r\n    if (!material || material.type !== \"MeshNormalMaterial\")  {\r\n        material = new THREE.MeshNormalMaterial();\r\n        material.side = THREE.DoubleSide;\r\n    } \r\n    \r\n    return new THREE.Mesh(geometry, material)\r\n}\r\n\r\n/**\r\n * Add a simple cube and sphere to the provided scene\r\n * \r\n * @param {THREE.Scene} scene \r\n */\r\nfunction addDefaultCubeAndSphere(scene) {\r\n\r\n    // create a cube\r\n    var cubeGeometry = new THREE.BoxGeometry(4, 4, 4);\r\n    var cubeMaterial = new THREE.MeshLambertMaterial({\r\n        color: 0xff0000\r\n    });\r\n    var cube = new THREE.Mesh(cubeGeometry, cubeMaterial);\r\n    cube.castShadow = true;\r\n\r\n    // position the cube\r\n    cube.position.x = -4;\r\n    cube.position.y = 3;\r\n    cube.position.z = 0;\r\n\r\n    // add the cube to the scene\r\n    scene.add(cube);\r\n\r\n    var sphereGeometry = new THREE.SphereGeometry(4, 20, 20);\r\n    var sphereMaterial = new THREE.MeshLambertMaterial({\r\n        color: 0x7777ff\r\n    });\r\n    var sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\r\n\r\n    // position the sphere\r\n    sphere.position.x = 20;\r\n    sphere.position.y = 0;\r\n    sphere.position.z = 2;\r\n    sphere.castShadow = true;\r\n\r\n    // add the sphere to the scene\r\n    scene.add(sphere);\r\n\r\n    return {\r\n        cube: cube,\r\n        sphere: sphere\r\n    };\r\n}\r\n\r\n/**\r\n * Add a simple ground plance to the provided scene\r\n * \r\n * @param {THREE.Scene} scene \r\n */\r\nfunction addGroundPlane(scene) {\r\n    // create the ground plane\r\n    var planeGeometry = new THREE.PlaneGeometry(60, 20, 120, 120);\r\n    var planeMaterial = new THREE.MeshPhongMaterial({\r\n        color: 0xffffff\r\n    });\r\n    var plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n    plane.receiveShadow = true;\r\n\r\n    // rotate and position the plane\r\n    plane.rotation.x = -0.5 * Math.PI;\r\n    plane.position.x = 15;\r\n    plane.position.y = 0;\r\n    plane.position.z = 0;\r\n\r\n    scene.add(plane);\r\n\r\n    return plane;\r\n}\r\n\r\n/**\r\n * Add a simple ground plance to the provided scene\r\n * \r\n * @param {THREE.Scene} scene \r\n */\r\nfunction addLargeGroundPlane(scene, useTexture) {\r\n\r\n    var withTexture = (useTexture !== undefined) ? useTexture : false;\r\n\r\n    // create the ground plane\r\n    var planeGeometry = new THREE.PlaneGeometry(10000, 10000);\r\n    var planeMaterial = new THREE.MeshPhongMaterial({\r\n        color: 0xffffff\r\n    });\r\n    if (withTexture) {\r\n        var textureLoader = new THREE.TextureLoader();\r\n        planeMaterial.map = textureLoader.load(\"../../assets/textures/general/floor-wood.jpg\");\r\n        planeMaterial.map.wrapS = THREE.RepeatWrapping; \r\n        planeMaterial.map.wrapT = THREE.RepeatWrapping; \r\n        planeMaterial.map.repeat.set(80,80)\r\n    }\r\n    var plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n    plane.receiveShadow = true;\r\n\r\n    // rotate and position the plane\r\n    plane.rotation.x = -0.5 * Math.PI;\r\n    plane.position.x = 0;\r\n    plane.position.y = 0;\r\n    plane.position.z = 0;\r\n\r\n    scene.add(plane);\r\n\r\n    return plane;\r\n}\r\n\r\nfunction addHouseAndTree(scene) {\r\n\r\n    createBoundingWall(scene);\r\n    createGroundPlane(scene);\r\n    createHouse(scene);\r\n    createTree(scene);\r\n\r\n    function createBoundingWall(scene) {\r\n        var wallLeft = new THREE.CubeGeometry(70, 2, 2);\r\n        var wallRight = new THREE.CubeGeometry(70, 2, 2);\r\n        var wallTop = new THREE.CubeGeometry(2, 2, 50);\r\n        var wallBottom = new THREE.CubeGeometry(2, 2, 50);\r\n\r\n        var wallMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0xa0522d\r\n        });\r\n\r\n        var wallLeftMesh = new THREE.Mesh(wallLeft, wallMaterial);\r\n        var wallRightMesh = new THREE.Mesh(wallRight, wallMaterial);\r\n        var wallTopMesh = new THREE.Mesh(wallTop, wallMaterial);\r\n        var wallBottomMesh = new THREE.Mesh(wallBottom, wallMaterial);\r\n\r\n        wallLeftMesh.position.set(15, 1, -25);\r\n        wallRightMesh.position.set(15, 1, 25);\r\n        wallTopMesh.position.set(-19, 1, 0);\r\n        wallBottomMesh.position.set(49, 1, 0);\r\n\r\n        scene.add(wallLeftMesh);\r\n        scene.add(wallRightMesh);\r\n        scene.add(wallBottomMesh);\r\n        scene.add(wallTopMesh);\r\n\r\n    }\r\n\r\n    function createGroundPlane(scene) {\r\n        // create the ground plane\r\n        var planeGeometry = new THREE.PlaneGeometry(70, 50);\r\n        var planeMaterial = new THREE.MeshPhongMaterial({\r\n            color: 0x9acd32\r\n        });\r\n        var plane = new THREE.Mesh(planeGeometry, planeMaterial);\r\n        plane.receiveShadow = true;\r\n\r\n        // rotate and position the plane\r\n        plane.rotation.x = -0.5 * Math.PI;\r\n        plane.position.x = 15;\r\n        plane.position.y = 0;\r\n        plane.position.z = 0;\r\n\r\n        scene.add(plane)\r\n    }\r\n\r\n    function createHouse(scene) {\r\n        var roof = new THREE.ConeGeometry(5, 4);\r\n        var base = new THREE.CylinderGeometry(5, 5, 6);\r\n\r\n        // create the mesh\r\n        var roofMesh = new THREE.Mesh(roof, new THREE.MeshPhongMaterial({\r\n            color: 0x8b7213\r\n        }));\r\n        var baseMesh = new THREE.Mesh(base, new THREE.MeshPhongMaterial({\r\n            color: 0xffe4c4\r\n        }));\r\n\r\n        roofMesh.position.set(25, 8, 0);\r\n        baseMesh.position.set(25, 3, 0);\r\n\r\n        roofMesh.receiveShadow = true;\r\n        baseMesh.receiveShadow = true;\r\n        roofMesh.castShadow = true;\r\n        baseMesh.castShadow = true;\r\n\r\n        scene.add(roofMesh);\r\n        scene.add(baseMesh);\r\n    }\r\n\r\n    /**\r\n     * Add the tree to the scene\r\n     * @param scene The scene to add the tree to\r\n     */\r\n    function createTree(scene) {\r\n        var trunk = new THREE.CubeGeometry(1, 8, 1);\r\n        var leaves = new THREE.SphereGeometry(4);\r\n\r\n        // create the mesh\r\n        var trunkMesh = new THREE.Mesh(trunk, new THREE.MeshPhongMaterial({\r\n            color: 0x8b4513\r\n        }));\r\n        var leavesMesh = new THREE.Mesh(leaves, new THREE.MeshPhongMaterial({\r\n            color: 0x00ff00\r\n        }));\r\n\r\n        // position the trunk. Set y to half of height of trunk\r\n        trunkMesh.position.set(-10, 4, 0);\r\n        leavesMesh.position.set(-10, 12, 0);\r\n\r\n        trunkMesh.castShadow = true;\r\n        trunkMesh.receiveShadow = true;\r\n        leavesMesh.castShadow = true;\r\n        leavesMesh.receiveShadow = true;\r\n\r\n        scene.add(trunkMesh);\r\n        scene.add(leavesMesh);\r\n    }\r\n}\r\n\r\nfunction createGhostTexture() {\r\n    var canvas = document.createElement('canvas');\r\n    canvas.width = 32;\r\n    canvas.height = 32;\r\n\r\n    var ctx = canvas.getContext('2d');\r\n    // the body\r\n    ctx.translate(-81, -84);\r\n\r\n    ctx.fillStyle = \"orange\";\r\n    ctx.beginPath();\r\n    ctx.moveTo(83, 116);\r\n    ctx.lineTo(83, 102);\r\n    ctx.bezierCurveTo(83, 94, 89, 88, 97, 88);\r\n    ctx.bezierCurveTo(105, 88, 111, 94, 111, 102);\r\n    ctx.lineTo(111, 116);\r\n    ctx.lineTo(106.333, 111.333);\r\n    ctx.lineTo(101.666, 116);\r\n    ctx.lineTo(97, 111.333);\r\n    ctx.lineTo(92.333, 116);\r\n    ctx.lineTo(87.666, 111.333);\r\n    ctx.lineTo(83, 116);\r\n    ctx.fill();\r\n\r\n    // the eyes\r\n    ctx.fillStyle = \"white\";\r\n    ctx.beginPath();\r\n    ctx.moveTo(91, 96);\r\n    ctx.bezierCurveTo(88, 96, 87, 99, 87, 101);\r\n    ctx.bezierCurveTo(87, 103, 88, 106, 91, 106);\r\n    ctx.bezierCurveTo(94, 106, 95, 103, 95, 101);\r\n    ctx.bezierCurveTo(95, 99, 94, 96, 91, 96);\r\n    ctx.moveTo(103, 96);\r\n    ctx.bezierCurveTo(100, 96, 99, 99, 99, 101);\r\n    ctx.bezierCurveTo(99, 103, 100, 106, 103, 106);\r\n    ctx.bezierCurveTo(106, 106, 107, 103, 107, 101);\r\n    ctx.bezierCurveTo(107, 99, 106, 96, 103, 96);\r\n    ctx.fill();\r\n\r\n    // the pupils\r\n    ctx.fillStyle = \"blue\";\r\n    ctx.beginPath();\r\n    ctx.arc(101, 102, 2, 0, Math.PI * 2, true);\r\n    ctx.fill();\r\n    ctx.beginPath();\r\n    ctx.arc(89, 102, 2, 0, Math.PI * 2, true);\r\n    ctx.fill();\r\n\r\n\r\n    var texture = new THREE.Texture(canvas);\r\n    texture.needsUpdate = true;\r\n    return texture;\r\n};\r\n\r\n/**\r\n * Add a folder to the gui containing the basic material properties.\r\n * \r\n * @param gui the gui to add to\r\n * @param controls the current controls object\r\n * @param material the material to control\r\n * @param geometry the geometry we're working with\r\n * @param name optionally the name to assign to the folder\r\n */\r\nfunction addBasicMaterialSettings(gui, controls, material, name) {\r\n\r\n    var folderName = (name !== undefined) ? name : 'THREE.Material';\r\n\r\n    controls.material = material;\r\n\r\n    var folder = gui.addFolder(folderName);\r\n    folder.add(controls.material, 'id');\r\n    folder.add(controls.material, 'uuid');\r\n    folder.add(controls.material, 'name');\r\n    folder.add(controls.material, 'opacity', 0, 1, 0.01);\r\n    folder.add(controls.material, 'transparent');\r\n    folder.add(controls.material, 'overdraw', 0, 1, 0.01);\r\n    folder.add(controls.material, 'visible');\r\n    folder.add(controls.material, 'side', {FrontSide: 0, BackSide: 1, BothSides: 2}).onChange(function (side) {\r\n        controls.material.side = parseInt(side)\r\n    });\r\n\r\n    folder.add(controls.material, 'colorWrite');\r\n    folder.add(controls.material, 'flatShading').onChange(function(shading) {\r\n        controls.material.flatShading = shading;\r\n        controls.material.needsUpdate = true;\r\n    });\r\n    folder.add(controls.material, 'premultipliedAlpha');\r\n    folder.add(controls.material, 'dithering');\r\n    folder.add(controls.material, 'shadowSide', {FrontSide: 0, BackSide: 1, BothSides: 2});\r\n    folder.add(controls.material, 'vertexColors', {NoColors: THREE.NoColors, FaceColors: THREE.FaceColors, VertexColors: THREE.VertexColors}).onChange(function (vertexColors) {\r\n        material.vertexColors = parseInt(vertexColors);\r\n    });\r\n    folder.add(controls.material, 'fog');\r\n\r\n    return folder;\r\n}\r\n\r\nfunction addSpecificMaterialSettings(gui, controls, material, name) {\r\n    controls.material = material;\r\n    \r\n    var folderName = (name !== undefined) ? name : 'THREE.' + material.type;\r\n    var folder = gui.addFolder(folderName);\r\n    switch (material.type) {\r\n        case \"MeshNormalMaterial\":\r\n            folder.add(controls.material,'wireframe');\r\n            return folder;\r\n\r\n        case \"MeshPhongMaterial\":\r\n            controls.specular = material.specular.getStyle();\r\n            folder.addColor(controls, 'specular').onChange(function (e) {\r\n                material.specular.setStyle(e)\r\n            });\r\n            folder.add(material, 'shininess', 0, 100, 0.01);\r\n            return folder;            \r\n            \r\n        case \"MeshStandardMaterial\":\r\n            controls.color = material.color.getStyle();\r\n            folder.addColor(controls, 'color').onChange(function (e) {\r\n                material.color.setStyle(e)\r\n            });\r\n            controls.emissive = material.emissive.getStyle();\r\n            folder.addColor(controls, 'emissive').onChange(function (e) {\r\n                material.emissive.setStyle(e)                \r\n            });\r\n            folder.add(material, 'metalness', 0, 1, 0.01);\r\n            folder.add(material, 'roughness', 0, 1, 0.01);\r\n            folder.add(material, 'wireframe');\r\n\r\n            return folder;\r\n    }\r\n}\r\n\r\nfunction redrawGeometryAndUpdateUI(gui, scene, controls, geomFunction) {\r\n    guiRemoveFolder(gui, controls.specificMaterialFolder);\r\n    guiRemoveFolder(gui, controls.currentMaterialFolder);\r\n    if (controls.mesh) scene.remove(controls.mesh)\r\n    var changeMat = eval(\"(\" + controls.appliedMaterial + \")\")\r\n    if (controls.mesh) {\r\n        controls.mesh = changeMat(geomFunction(), controls.mesh.material);\r\n    } else {\r\n        controls.mesh = changeMat(geomFunction());\r\n    }\r\n    \r\n    controls.mesh.castShadow = controls.castShadow;\r\n    scene.add(controls.mesh)\r\n    controls.currentMaterialFolder = addBasicMaterialSettings(gui, controls, controls.mesh.material);\r\n    controls.specificMaterialFolder = addSpecificMaterialSettings(gui, controls, controls.mesh.material);\r\n  }\r\n\r\n/**\r\n * Remove a folder from the dat.gui\r\n * \r\n * @param {*} gui \r\n * @param {*} folder \r\n */\r\nfunction guiRemoveFolder(gui, folder) {\r\n    if (folder && folder.name && gui.__folders[folder.name]) {\r\n        gui.__folders[folder.name].close();\r\n        gui.__folders[folder.name].domElement.parentNode.parentNode.removeChild(gui.__folders[folder.name].domElement.parentNode);\r\n        delete gui.__folders[folder.name];\r\n        gui.onResize();\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * \r\n * @param gui the gui to add to\r\n * @param controls the current controls object\r\n * @param material material for the meshes\r\n */\r\nfunction addMeshSelection(gui, controls, material, scene) {\r\n  var sphereGeometry = new THREE.SphereGeometry(10, 20, 20);\r\n  var cubeGeometry = new THREE.BoxGeometry(16, 16, 15);\r\n  var planeGeometry = new THREE.PlaneGeometry(14, 14, 4, 4);\r\n\r\n  var sphere = new THREE.Mesh(sphereGeometry, material);\r\n  var cube = new THREE.Mesh(cubeGeometry, material);\r\n  var plane = new THREE.Mesh(planeGeometry, material);\r\n\r\n  sphere.position.x = 0;\r\n  sphere.position.y = 11;\r\n  sphere.position.z = 2;\r\n\r\n  cube.position.y = 8;\r\n\r\n  controls.selectedMesh = \"cube\";\r\n  loadGopher(material).then(function(gopher) {\r\n\r\n    gopher.scale.x = 5;\r\n    gopher.scale.y = 5;\r\n    gopher.scale.z = 5;\r\n    gopher.position.z = 0\r\n    gopher.position.x = -10\r\n    gopher.position.y = 0\r\n\r\n    gui.add(controls, 'selectedMesh', [\"cube\", \"sphere\", \"plane\", \"gopher\"]).onChange(function (e) {\r\n\r\n      scene.remove(controls.selected);\r\n  \r\n      switch (e) {\r\n        case \"cube\":\r\n          scene.add(cube);\r\n          controls.selected = cube;\r\n          break;\r\n        case \"sphere\":\r\n          scene.add(sphere);\r\n          controls.selected = sphere;\r\n          break;\r\n        case \"plane\":\r\n          scene.add(plane);\r\n          controls.selected = plane;\r\n          break;\r\n        case \"gopher\":\r\n          scene.add(gopher);\r\n          controls.selected = gopher;\r\n          break;\r\n      }\r\n    });\r\n  });\r\n\r\n  controls.selected = cube;\r\n  scene.add(controls.selected);\r\n}\r\n\r\n/**\r\n * Load a gopher, and apply the material\r\n * @param material if set apply this material to the gopher\r\n * @returns promise which is fullfilled once the goher is loaded\r\n */\r\nfunction loadGopher(material) {\r\n    var loader = new THREE.OBJLoader();\r\n    var mesh = null;\r\n    var p = new Promise(function(resolve) {\r\n        loader.load('../../assets/models/gopher/gopher.obj', function (loadedMesh) {\r\n            // this is a group of meshes, so iterate until we reach a THREE.Mesh\r\n            mesh = loadedMesh;\r\n            if (material) {\r\n                // material is defined, so overwrite the default material.\r\n                computeNormalsGroup(mesh);\r\n                setMaterialGroup(material, mesh);\r\n            }\r\n            resolve(mesh);\r\n        });\r\n    });\r\n\r\n    return p;\r\n}\r\n\r\nfunction setMaterialGroup(material, group) {\r\n    if (group instanceof THREE.Mesh) {\r\n        group.material = material;        \r\n    } else if (group instanceof THREE.Group) {\r\n        group.children.forEach(function(child) {setMaterialGroup(material, child)});\r\n    }\r\n}\r\n\r\nfunction computeNormalsGroup(group) {\r\n    if (group instanceof THREE.Mesh) {\r\n        var tempGeom = new THREE.Geometry();\r\n        tempGeom.fromBufferGeometry(group.geometry)\r\n        tempGeom.computeFaceNormals();\r\n        tempGeom.mergeVertices();\r\n        tempGeom.computeVertexNormals();\r\n\r\n        tempGeom.normalsNeedUpdate = true;\r\n        \r\n        // group = new THREE.BufferGeometry();\r\n        // group.fromGeometry(tempGeom);\r\n        group.geometry = tempGeom;\r\n\r\n    } else if (group instanceof THREE.Group) {\r\n        group.children.forEach(function(child) {computeNormalsGroup(child)});\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"home.00381089.js.map","sourceRoot":"/__parcel_source_root/"}